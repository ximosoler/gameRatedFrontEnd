{"ast":null,"code":"import { filter, map, Subject } from 'rxjs';\nimport { baseURL, httpOptions } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crypto.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./decode.service\";\nexport var Events;\n(function (Events) {\n  Events[Events[\"login\"] = 0] = \"login\";\n  Events[Events[\"logout\"] = 1] = \"logout\";\n})(Events || (Events = {}));\nexport class EmitEvent {\n  constructor(event, token) {\n    this.event = event;\n    this.token = token;\n  }\n}\nclass SessionService {\n  constructor(oCryptoService, oHttpClient, oDecodeService) {\n    this.oCryptoService = oCryptoService;\n    this.oHttpClient = oHttpClient;\n    this.oDecodeService = oDecodeService;\n    this.entityURL = '/session';\n    this.sURL = `${baseURL}${this.entityURL}`;\n    this.subject = new Subject();\n  }\n  login(strLogin, strPassword) {\n    const loginData = JSON.stringify({\n      username: strLogin,\n      password: this.oCryptoService.getSHA256(strPassword)\n    });\n    return this.oHttpClient.post(this.sURL, loginData, httpOptions);\n  }\n  getUserName() {\n    if (!this.isSessionActive()) {\n      return \"\";\n    } else {\n      let token = localStorage.getItem(\"token\");\n      return this.oDecodeService.parseJwt(token).name;\n    }\n  }\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n  isSessionActive() {\n    let strToken = localStorage.getItem(\"token\");\n    if (strToken) {\n      let oDecodedToken = this.oDecodeService.parseJwt(strToken);\n      if (Date.now() >= oDecodedToken.exp * 1000) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n  }\n  on(event) {\n    return this.subject.pipe(filter(e => {\n      return e.event === event;\n    }), map(e => {\n      return e.token;\n    }));\n  }\n  emit(event) {\n    this.subject.next(event);\n  }\n}\nSessionService.ɵfac = function SessionService_Factory(t) {\n  return new (t || SessionService)(i0.ɵɵinject(i1.CryptoService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.DecodeService));\n};\nSessionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SessionService,\n  factory: SessionService.ɵfac,\n  providedIn: 'root'\n});\nexport { SessionService };","map":{"version":3,"names":["filter","map","Subject","baseURL","httpOptions","Events","EmitEvent","constructor","event","token","SessionService","oCryptoService","oHttpClient","oDecodeService","entityURL","sURL","subject","login","strLogin","strPassword","loginData","JSON","stringify","username","password","getSHA256","post","getUserName","isSessionActive","localStorage","getItem","parseJwt","name","getToken","strToken","oDecodedToken","Date","now","exp","logout","removeItem","on","pipe","e","emit","next","i0","ɵɵinject","i1","CryptoService","i2","HttpClient","i3","DecodeService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\xsole\\gameRatedFrontEnd\\src\\app\\service\\session.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, Subject } from 'rxjs';\r\nimport { CryptoService } from './crypto.service';\r\nimport { DecodeService } from './decode.service';\r\nimport { baseURL, httpOptions } from 'src/environments/environment';\r\nimport { IToken } from '../model/token-interface';\r\n\r\nexport enum Events {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport class EmitEvent {\r\n    constructor(public event: Events, public token?: string) { }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class SessionService {\r\n\r\n    private entityURL = '/session';\r\n    sURL: string = `${baseURL}${this.entityURL}`;\r\n    subject = new Subject<EmitEvent>();\r\n\r\n    constructor(\r\n        private oCryptoService: CryptoService,\r\n        private oHttpClient: HttpClient,\r\n        private oDecodeService: DecodeService\r\n    ) { }\r\n\r\n    login(strLogin: string, strPassword: string): Observable<string> {\r\n        const loginData = JSON.stringify({ username: strLogin, password: this.oCryptoService.getSHA256(strPassword) });\r\n        return this.oHttpClient.post<string>(this.sURL, loginData, httpOptions);\r\n    }\r\n\r\n    getUserName(): string {\r\n        if (!this.isSessionActive()) {\r\n            return \"\";\r\n        } else {\r\n            let token: string = localStorage.getItem(\"token\");\r\n            return this.oDecodeService.parseJwt(token).name;\r\n        }\r\n    }\r\n\r\n    getToken(): string {\r\n        return localStorage.getItem(\"token\");\r\n    }\r\n\r\n    isSessionActive(): Boolean {\r\n        let strToken: string = localStorage.getItem(\"token\");\r\n        if (strToken) {            \r\n            let oDecodedToken: IToken = this.oDecodeService.parseJwt(strToken);\r\n            if (Date.now() >= oDecodedToken.exp * 1000) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(\"token\");\r\n    }\r\n\r\n    on(event: Events): Observable<String> {\r\n        return this.subject.pipe(\r\n            filter((e: EmitEvent) => {\r\n                return e.event === event;\r\n            }),\r\n            map((e: EmitEvent) => {\r\n                return e.token;\r\n            })\r\n        )\r\n    }\r\n\r\n    emit(event: EmitEvent) {\r\n        this.subject.next(event);\r\n    }\r\n\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}